import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.gradle.nativeplatform.platform.internal.DefaultOperatingSystem

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

mainClassName = "com.evacipated.cardcrawl.modthespire.Loader"

task LoadVersion {
    doLast {
        logger.lifecycle("Adding version properties")
        def version = file("$buildDir/resources/main/META-INF/version.prop")
        version.text = "version=$project.version"
    }
}

jar {
    dependsOn LoadVersion
    manifest {
        attributes(
            "Main-Class": mainClassName
        )
    }
}

shadowJar {

}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.javassist:javassist:3.29.2-GA'
    implementation 'org.scannotation:scannotation:1.0.3'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.ow2.asm:asm:6.2.1'
    implementation 'com.vdurmont:semver4j:2.2.0'
    implementation 'com.code-disaster.steamworks4j:steamworks4j:1.9.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.10'
    implementation 'org.lwjgl:lwjgl:3.3.1'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.1'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.1'
    implementation 'org.lwjgl:lwjgl-openal:3.3.1'
    implementation 'org.lwjgl:lwjgl:3.3.1'
    implementation 'org.lwjgl:lwjgl:3.3.1'
    implementation 'org.lwjgl:lwjgl:3.3.1'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.1'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.1'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.1'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.1'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.1'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.1'
    implementation 'org.lwjgl:lwjgl-openal:3.3.1'
    implementation 'org.lwjgl:lwjgl-openal:3.3.1'
    implementation 'org.lwjgl:lwjgl-openal:3.3.1'
    implementation 'com.badlogicgames.gdx:gdx-backend-lwjgl3:1.9.5'
    implementation 'com.badlogicgames.gdx:gdx-controllers-lwjgl3:1.9.5'
    compileOnly files("local/desktop-1.0.jar")
}

group = 'com.evacipated.cardcrawl'
version = '3.30.3'
description = 'ModTheSpire'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task install {
    doLast {
        def props = new Properties()
        def failed
        def targetPropFile = file("${projectDir}/install.properties")
        try (def fis = new FileInputStream(targetPropFile)) {
            props.load(fis)
            failed = !props.hasProperty("spire.dir") || props.get("spire.dir") == null || props.get("spire.dir") == ""
        } catch(IOException e) {
            failed = true
            logger.lifecycle("Failed to read install.properties: ", e.message)
            logger.lifecycle("Please put the absolute path to your slay the spire installation (The directory containing desktop-1.0.jar) as the value of spire.dir in ${targetPropFile.absolutePath}")
        }

        if(failed) {
            props.put("spir.dir", "")
            try (def fos = new FileOutputStream(file(targetPropFile))) {
                props.save(fos, null)
            }
            throw new RuntimeException("No sts install directory given. Please populate '${targetPropFile.absolutePath}'s \"spire.dir\" property with your slay-the-spire directory (the one with desktop-1.0.jar). ");
        }

        def stsDir = file(props["spire.dir"])
        if(!stsDir.exists() || !stsDir.isDirectory()) {
            logger.lifecycle("${stsDir} does not appear to be a directory/exist!")
            throw new RuntimeException("Invalid sts install directory! '${stsDir}' either does not exist or is not a directory");
        }

        def desktopJar = file(props["spire.dir"] + "/desktop-1.0.jar")
        if(!desktopJar.exists()) throw new RuntimeException("'${stsDir}' does not appear to be a valid slay the spire install directory!")

        def os = DefaultNativePlatform.currentOperatingSystem;
        def outputFiles = ["$buildDir/libs/ModTheSpire.jar"]
        if(os.isWindows()) {
            outputFiles.add("$projectDir/MTS.cmd")
        } else {
            outputFiles.add("$projectDir/MTS.sh")
        }

        copy {
            include outputFiles
            into stsDir
        }
    }
}
