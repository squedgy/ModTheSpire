import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform


/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'idea'
    id 'java'
    id 'application'
}

def localJar = files("$projectDir/local/desktop-1.0.jar")
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    java.sourceCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'

        compileOnly localJar
    }
}

allprojects {
    group = 'com.evacipated.cardcrawl'
    version = '3.30.3'
    description = 'ModTheSpire'

    repositories {
        maven {
            url = uri('https://repo.maven.apache.org/maven2/')
        }
        mavenLocal()
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

dependencies {
    implementation project(":core")
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

mainClassName = "com.evacipated.cardcrawl.modthespire.Loader"

jar {
    def projectJarsToInclude = [
        "corepatches-lwjgl2",
        "corepatches-lwjgl3",
        "lwjgl3",
        "kotlin",
    ]

    projectJarsToInclude.each {
        dependsOn project(":$it").tasks.build
    }

    from {
        def allFiles = configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }

        projectJarsToInclude.each {
            def files = project(":$it").tasks.jar.outputs.files
            allFiles += files
        }

        allFiles
    }

    doLast {
        projectJarsToInclude.each {
            logger.lifecycle "${project(":$it").tasks.jar.outputs.files.files}"
        }
    }

    rename "$project.version-(.*\\.jar)", '$1'
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes(
            "Main-Class": mainClassName
        )
    }
}

task install {
    dependsOn build

    doLast {
        def props = new Properties()
        def failed
        def targetPropFile = file("${projectDir}/install.properties")
        try (def fis = new FileInputStream(targetPropFile)) {
            props.load(fis)
            failed = !props.hasProperty("spire.dir") || props.get("spire.dir") == null || props.get("spire.dir") == ""
        } catch(IOException e) {
            failed = true
            logger.lifecycle("Failed to read install.properties: ", e.message)
            logger.lifecycle("Please put the absolute path to your slay the spire installation (The directory containing desktop-1.0.jar) as the value of spire.dir in ${targetPropFile.absolutePath}")
        }

        if(failed) {
            props.put("spir.dir", "")
            try (def fos = new FileOutputStream(file(targetPropFile))) {
                props.save(fos, null)
            }
            throw new RuntimeException("No sts install directory given. Please populate '${targetPropFile.absolutePath}'s \"spire.dir\" property with your slay-the-spire directory (the one with desktop-1.0.jar). ");
        }

        def stsDir = file(props["spire.dir"])
        if(!stsDir.exists() || !stsDir.isDirectory()) {
            logger.lifecycle("${stsDir} does not appear to be a directory/exist!")
            throw new RuntimeException("Invalid sts install directory! '${stsDir}' either does not exist or is not a directory");
        }

        def desktopJar = file(props["spire.dir"] + "/desktop-1.0.jar")
        if(!desktopJar.exists()) throw new RuntimeException("'${stsDir}' does not appear to be a valid slay the spire install directory!")

        def os = DefaultNativePlatform.currentOperatingSystem;
        def outputFiles = ["$buildDir/libs/ModTheSpire.jar"]
        if(os.isWindows()) {
            outputFiles.add("$projectDir/MTS.cmd")
        } else {
            outputFiles.add("$projectDir/MTS.sh")
        }

        copy {
            include outputFiles
            into stsDir
        }
    }
}
